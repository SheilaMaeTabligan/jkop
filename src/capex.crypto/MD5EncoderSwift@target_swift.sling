
class:

lang "swift" {{{
	public func encode(_ input: [UInt8]) -> String {
		return stringToHex(toMD5(input))
	}

	func toMD5(_ input: [UInt8]) -> [UInt8] {
		return binl2rstr(md5(rstr2binl(input), input.count * 8))
	}

	func stringToHex(_ input: [UInt8]) -> String {
		let hexTab: [Character] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]
		var output: [Character] = []
		for i in 0..<input.count {
			let x = input[i]
			let value1 = hexTab[Int((x >> 4) & 0x0F)]
			let value2 = hexTab[Int(Int32(x) & 0x0F)]
			output.append(value1)
			output.append(value2)
		}
		return String(output)
	}

	func md5(_ input: [Int32], _ len: Int) -> [Int32] {
		var x: [Int: Int32] = [:]
		for (index, value) in input.enumerated() {
			x[index] = value
		}
		let value: Int32 = 0x80 << Int32((len) % 32)
		x[len >> 5] = unwrap(x[len >> 5]) | value
		let index = (((len + 64) >> 9) << 4) + 14
		x[index] = unwrap(x[index]) | Int32(len)
		var a: Int32 =  1732584193
		var b: Int32 = -271733879
		var c: Int32 = -1732584194
		var d: Int32 =  271733878
		for i in stride(from: 0, to: length(x), by: 16) {
			let aa: Int32 = a
			let bb: Int32 = b
			let cc: Int32 = c
			let dd: Int32 = d
			a = ff(a, b, c, d, unwrap(x[i + 0]), 7 , -680876936)
			d = ff(d, a, b, c, unwrap(x[i + 1]), 12, -389564586)
			c = ff(c, d, a, b, unwrap(x[i + 2]), 17,  606105819)
			b = ff(b, c, d, a, unwrap(x[i + 3]), 22, -1044525330)
			a = ff(a, b, c, d, unwrap(x[i + 4]), 7 , -176418897)
			d = ff(d, a, b, c, unwrap(x[i + 5]), 12,  1200080426)
			c = ff(c, d, a, b, unwrap(x[i + 6]), 17, -1473231341)
			b = ff(b, c, d, a, unwrap(x[i + 7]), 22, -45705983)
			a = ff(a, b, c, d, unwrap(x[i + 8]), 7 ,  1770035416)
			d = ff(d, a, b, c, unwrap(x[i + 9]), 12, -1958414417)
			c = ff(c, d, a, b, unwrap(x[i + 10]), 17, -42063)
			b = ff(b, c, d, a, unwrap(x[i + 11]), 22, -1990404162)
			a = ff(a, b, c, d, unwrap(x[i + 12]), 7 ,  1804603682)
			d = ff(d, a, b, c, unwrap(x[i + 13]), 12, -40341101)
			c = ff(c, d, a, b, unwrap(x[i + 14]), 17, -1502002290)
			b = ff(b, c, d, a, unwrap(x[i + 15]), 22,  1236535329)
			a = gg(a, b, c, d, unwrap(x[i + 1]), 5 , -165796510)
			d = gg(d, a, b, c, unwrap(x[i + 6]), 9 , -1069501632)
			c = gg(c, d, a, b, unwrap(x[i + 11]), 14,  643717713)
			b = gg(b, c, d, a, unwrap(x[i + 0]), 20, -373897302)
			a = gg(a, b, c, d, unwrap(x[i + 5]), 5 , -701558691)
			d = gg(d, a, b, c, unwrap(x[i + 10]), 9 ,  38016083)
			c = gg(c, d, a, b, unwrap(x[i + 15]), 14, -660478335)
			b = gg(b, c, d, a, unwrap(x[i + 4]), 20, -405537848)
			a = gg(a, b, c, d, unwrap(x[i + 9]), 5 ,  568446438)
			d = gg(d, a, b, c, unwrap(x[i + 14]), 9 , -1019803690)
			c = gg(c, d, a, b, unwrap(x[i + 3]), 14, -187363961)
			b = gg(b, c, d, a, unwrap(x[i + 8]), 20,  1163531501)
			a = gg(a, b, c, d, unwrap(x[i + 13]), 5 , -1444681467)
			d = gg(d, a, b, c, unwrap(x[i + 2]), 9 , -51403784)
			c = gg(c, d, a, b, unwrap(x[i + 7]), 14,  1735328473)
			b = gg(b, c, d, a, unwrap(x[i + 12]), 20, -1926607734)
			a = hh(a, b, c, d, unwrap(x[i + 5]), 4 , -378558)
			d = hh(d, a, b, c, unwrap(x[i + 8]), 11, -2022574463)
			c = hh(c, d, a, b, unwrap(x[i + 11]), 16,  1839030562)
			b = hh(b, c, d, a, unwrap(x[i + 14]), 23, -35309556)
			a = hh(a, b, c, d, unwrap(x[i + 1]), 4 , -1530992060)
			d = hh(d, a, b, c, unwrap(x[i + 4]), 11,  1272893353)
			c = hh(c, d, a, b, unwrap(x[i + 7]), 16, -155497632)
			b = hh(b, c, d, a, unwrap(x[i + 10]), 23, -1094730640)
			a = hh(a, b, c, d, unwrap(x[i + 13]), 4 ,  681279174)
			d = hh(d, a, b, c, unwrap(x[i + 0]), 11, -358537222)
			c = hh(c, d, a, b, unwrap(x[i + 3]), 16, -722521979)
			b = hh(b, c, d, a, unwrap(x[i + 6]), 23,  76029189)
			a = hh(a, b, c, d, unwrap(x[i + 9]), 4 , -640364487)
			d = hh(d, a, b, c, unwrap(x[i + 12]), 11, -421815835)
			c = hh(c, d, a, b, unwrap(x[i + 15]), 16,  530742520)
			b = hh(b, c, d, a, unwrap(x[i + 2]), 23, -995338651)
			a = ii(a, b, c, d, unwrap(x[i + 0]), 6 , -198630844)
			d = ii(d, a, b, c, unwrap(x[i + 7]), 10,  1126891415)
			c = ii(c, d, a, b, unwrap(x[i + 14]), 15, -1416354905)
			b = ii(b, c, d, a, unwrap(x[i + 5]), 21, -57434055)
			a = ii(a, b, c, d, unwrap(x[i + 12]), 6 ,  1700485571)
			d = ii(d, a, b, c, unwrap(x[i + 3]), 10, -1894986606)
			c = ii(c, d, a, b, unwrap(x[i + 10]), 15, -1051523)
			b = ii(b, c, d, a, unwrap(x[i + 1]), 21, -2054922799)
			a = ii(a, b, c, d, unwrap(x[i + 8]), 6 ,  1873313359)
			d = ii(d, a, b, c, unwrap(x[i + 15]), 10, -30611744)
			c = ii(c, d, a, b, unwrap(x[i + 6]), 15, -1560198380)
			b = ii(b, c, d, a, unwrap(x[i + 13]), 21,  1309151649)
			a = ii(a, b, c, d, unwrap(x[i + 4]), 6 , -145523070)
			d = ii(d, a, b, c, unwrap(x[i + 11]), 10, -1120210379)
			c = ii(c, d, a, b, unwrap(x[i + 2]), 15,  718787259)
			b = ii(b, c, d, a, unwrap(x[i + 9]), 21, -343485551)
			a = addUnsigned(a, aa)
			b = addUnsigned(b, bb)
			c = addUnsigned(c, cc)
			d = addUnsigned(d, dd)
		}
		return [a, b, c, d]
	}

	func rstr2binl(_ input: [UInt8]) -> [Int32] {
		var output: [Int: Int32] = [:]

		for i in stride(from: 0, to: input.count * 8, by: 8) {
			let value: Int32 = (Int32(input[i/8]) & 0xFF) << (Int32(i) % 32)
		output[i >> 5] = unwrap(output[i >> 5]) | value
		}
		return dictionary2array(output)
	}

	func binl2rstr(_ input: [Int32]) -> [UInt8] {
		var output: [UInt8] = []
		for i in stride(from: 0, to: input.count * 32, by: 8) {
			let value: Int32 = zeroFillRightShift(input[i>>5], Int32(i % 32)) & 0xFF
			output.append(UInt8(value))
		}
		return output
	}

	func addUnsigned(_ x: Int32, _ y: Int32) -> Int32 {
		return x &+ y
	}

	func rotateLeft(_ num: Int32, _ cnt: Int32) -> Int32 {
		return (num << cnt) | zeroFillRightShift(num, (32 - cnt))
	}

	func cmn(_ q: Int32, _ a: Int32, _ b: Int32, _ x: Int32, _ s: Int32, _ t: Int32) -> Int32 {
		return addUnsigned(rotateLeft(addUnsigned(addUnsigned(a, q), addUnsigned(x, t)), s), b)
	}

	func ff(_ a: Int32, _ b: Int32, _ c: Int32, _ d: Int32, _ x: Int32, _ s: Int32, _ t: Int32) -> Int32 {
		return cmn((b & c) | ((~b) & d), a, b, x, s, t)
	}

	func gg(_ a: Int32, _ b: Int32, _ c: Int32, _ d: Int32, _ x: Int32, _ s: Int32, _ t: Int32) -> Int32 {
		return cmn((b & d) | (c & (~d)), a, b, x, s, t)
	}

	func hh(_ a: Int32, _ b: Int32, _ c: Int32, _ d: Int32, _ x: Int32, _ s: Int32, _ t: Int32) -> Int32 {
		return cmn(b ^ c ^ d, a, b, x, s, t)
	}

	func ii(_ a: Int32, _ b: Int32, _ c: Int32, _ d: Int32, _ x: Int32, _ s: Int32, _ t: Int32) -> Int32 {
		return cmn(c ^ (b | (~d)), a, b, x, s, t)
	}

	func length(_ dictionary: [Int: Int32]) -> Int {
		return (dictionary.keys.max() ?? 0) + 1
	}

	func dictionary2array(_ dictionary: [Int: Int32]) -> [Int32] {
		var array = Array<Int32>(repeating: 0, count: dictionary.keys.count)
		for i in Array(dictionary.keys).sorted() {
			array[i] = unwrap(dictionary[i])
		}
		return array
	}

	func unwrap(_ value: Int32?, _ fallback: Int32 = 0) -> Int32 {
		if let value = value {
			return value
		}
		return fallback
	}

	func zeroFillRightShift(_ num: Int32, _ count: Int32) -> Int32 {
		let value = UInt32(bitPattern: num) >> UInt32(bitPattern: count)
		return Int32(bitPattern: value)
	}
}}}
