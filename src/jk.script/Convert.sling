
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.fs

class:

func asFile(o as dynamic) static as File
{
	assert o
	if o is File:
		return o as! File
	if o is string:
		return File.forPath(o as! string)
	if o is object {
		var ss = String.forObject(o as! object)
		if ss:
			return File.forPath(ss)
	}
	return null
}

func asBoolean(o as dynamic, default as bool = false) static as bool
{
	if o && o is bool:
		return o as! bool
	if o && o is string:
		return Boolean.asBoolean(o as! string)
	if o && o is object:
		return Boolean.asBoolean(o as! object)
	return default
}

func asString(o as dynamic) static as string
{
	if o && o is string:
		return o as! string
    if o && o is File:
        return (o as! File).getPath()
	if o && o is object:
		return String.forObject(o as! object)
	return null
}

func asDynamicMap(o as dynamic) static as DynamicMap
{
	return null
}

func asObjectVector(o as dynamic) static as vector
{
	var it = assert DynamicObject.iterate(o)
	var v = new vector
	loop {
		var oo = it.next()
		if not oo:
			break
		v += oo
	}
	return v
}

func asFileVector(o as dynamic) static as vector<File>
{
	var it = assert DynamicObject.iterate(o)
	var v = new vector<File>
	loop {
		var oo = it.next()
		if not oo:
			break
		var ff = asFile(oo)
		if ff:
			v += ff
	}
	return v
}
