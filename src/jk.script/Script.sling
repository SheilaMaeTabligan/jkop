
/*
 * This file is part of Jkop
 * Copyright (c) 2016-2018 Job and Esther Technologies Oy
 * Copyright (c) 2018-2019 Eqela Oy
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import jk.log
import jk.console

class:

var entryPoints static as map<string,function<int,vector<string>>>

var ctx public static as LoggingContext

func initialize static
{
	ctx = new ConsoleApplicationContext()
}

func print(message as dynamic) static
{
	println Convert.asString(message)
}

func status(message as dynamic) static
{
	Log.status(ctx, Convert.asString(message))
}

func debug(message as dynamic) static
{
	Log.debug(ctx, Convert.asString(message))
}

func info(message as dynamic) static
{
	Log.info(ctx, Convert.asString(message))
}

func warning(message as dynamic) static
{
	Log.warning(ctx, Convert.asString(message))
}

func error(message as dynamic) static
{
	throw ExceptionWithString.forString(Convert.asString(message), false)
}

func execute(script as function) static as int
{
	assert script
	initialize()
	try {
		script()
	}
	catch e {
		Log.error(ctx, String.asString(e))
		return 1
	}
	return 0
}

func entry(name as dynamic, handler as function<int,vector<string>>) static
{
	var sname = assert Convert.asString(name)
	if not entryPoints:
		entryPoints = new map<string,function<void,vector<string>>>
	entryPoints[sname] = handler
}

func main(args as array<string>) static as int
{
	initialize()
	if args && sizeof args > 0 {
		var cmd = args[0]
		if cmd && entryPoints {
			var handler = Map.get(entryPoints, cmd)
			if handler {
				var v = new vector<string>
				var nargs = sizeof args
				for(var n=1; n<nargs; n++):
					v += args[n]
				var r = -1
				try {
					r = handler(v)
				}
				catch e {
					Log.error(ctx, String.asString(e))
					r = -1
				}
				return r
			}
		}
	}
	Log.error(ctx, "Invalid parameters")
	return -1
}
